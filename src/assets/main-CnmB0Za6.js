var T=Object.defineProperty;var w=(n,t,e)=>t in n?T(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var g=(n,t,e)=>w(n,typeof t!="symbol"?t+"":t,e);import"./main-B5qjSYml.js";const x=()=>Math.random().toString(36).substr(2,9),E=n=>new Intl.DateTimeFormat("en-US",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(n),y=(n,t)=>{let e;return function(...a){const d=()=>{clearTimeout(e),n(...a)};clearTimeout(e),e=setTimeout(d,t)}},p=[{id:"1",title:"Learn Vite",completed:!1},{id:"2",title:"Configure Build",completed:!0},{id:"3",title:"Write Tests",completed:!1}],m=n=>new Promise(t=>setTimeout(t,n));class h{static async getTasks(){return await m(500),[...p]}static async addTask(t){await m(300);const e={id:x(),title:t,completed:!1};return p.push(e),e}static async toggleTask(t){await m(200);const e=p.find(s=>s.id===t);if(e)return e.completed=!e.completed,{...e};throw new Error("Task not found")}}class v{constructor(t){this.container=document.getElementById(t),this.tasks=[],this.init()}async init(){this.renderLoading();try{this.tasks=await h.getTasks(),this.render()}catch(t){this.renderError(t)}}renderLoading(){this.container.innerHTML='<div class="loading">Loading tasks...</div>'}renderError(t){this.container.innerHTML=`<div class="error">Error: ${t.message}</div>`}render(){const t=`
      <div class="task-list">
        <div class="task-list__header">
          <h2>Task List</h2>
          <span>Last updated: ${E(new Date)}</span>
        </div>
        <ul>
          ${this.tasks.map(e=>`
            <li class="task-item ${e.completed?"completed":""}" data-id="${e.id}">
              <input type="checkbox" ${e.completed?"checked":""}>
              <span>${e.title}</span>
            </li>
          `).join("")}
        </ul>
      </div>
    `;this.container.innerHTML=t,this.attachEventListeners()}attachEventListeners(){this.container.querySelectorAll(".task-item").forEach(t=>{t.querySelector('input[type="checkbox"]').addEventListener("change",y(async()=>{const s=t.dataset.id;try{await h.toggleTask(s);const a=this.tasks.findIndex(d=>d.id===s);a!==-1&&(this.tasks[a].completed=!this.tasks[a].completed,t.classList.toggle("completed"))}catch(a){console.error("Failed to toggle task:",a)}},300))})}}class k{constructor(){g(this,"handleAddTask",y(async()=>{const t=this.newTaskInput.value.trim();if(t)try{await h.addTask(t),this.newTaskInput.value="",this.taskList.init()}catch(e){console.error("Failed to add task:",e)}},300));this.taskList=null,this.newTaskInput=null}init(){const t=document.createElement("div");t.id="task-list-container",document.getElementById("app").appendChild(t),this.createNewTaskInput(),this.taskList=new v("task-list-container")}createNewTaskInput(){const t=document.createElement("div");t.className="new-task-container",t.innerHTML=`
      <input type="text" id="new-task-input" placeholder="Add new task">
      <button id="add-task-btn">Add</button>
    `,document.getElementById("app").appendChild(t),this.newTaskInput=document.getElementById("new-task-input"),document.getElementById("add-task-btn").addEventListener("click",()=>this.handleAddTask()),this.newTaskInput.addEventListener("keypress",s=>{s.key==="Enter"&&this.handleAddTask()})}}document.addEventListener("DOMContentLoaded",()=>{new k().init()});class b{constructor(){this.manifest=null,this.isDevelopment=!0}async loadManifest(){if(!this.isDevelopment)try{const t=await fetch("/manifest.json");this.manifest=await t.json()}catch{console.warn("Manifest not found, using fallback paths")}}assetPath(t){return this.isDevelopment?`/assets/images/${t}`:this.manifest&&this.manifest[`assets/images/${t}`]?this.manifest[`assets/images/${t}`].file:`/assets/images/${t}`}imageTag(t,e={}){const s=document.createElement("img");return s.src=this.assetPath(t),s.alt=e.alt||t,e.class&&(s.className=e.class),e.style&&Object.assign(s.style,e.style),Object.keys(e).forEach(a=>{["class","style","alt"].includes(a)||s.setAttribute(a,e[a])}),s}getAvailableImages(){return["logo.png","banner.jpg","test1.jpg","test2.jpeg","test3.png","test4.gif","test5.svg","test6.webp","icon.svg"].map(e=>({filename:e,name:this.formatImageName(e),type:e.split(".").pop().toUpperCase(),path:this.assetPath(e)}))}formatImageName(t){return t.split(".")[0].replace(/[-_]/g," ").replace(/\b\w/g,s=>s.toUpperCase())}async init(){await this.loadManifest()}}const u=new b;console.log("Welcome to Vite Sprockets!");async function I(){const n=document.getElementById("app");if(!n)return;await u.init();const t=document.createElement("div");t.style.padding="20px";const e=document.createElement("h1");e.textContent="Image Gallery - Sprockets Style",e.style.marginBottom="20px",t.appendChild(e);const s=document.createElement("p");s.innerHTML=`
    <strong>Development:</strong> Images served from <code>/public/assets/images/</code><br>
    <strong>Production:</strong> Images processed through Vite manifest (like Rails Sprockets)
  `,s.style.marginBottom="20px",s.style.padding="15px",s.style.backgroundColor="#f0f8ff",s.style.borderLeft="4px solid #007acc",t.appendChild(s);const a=document.createElement("div");a.style.display="grid",a.style.gridTemplateColumns="repeat(auto-fill, minmax(250px, 1fr))",a.style.gap="20px",u.getAvailableImages().forEach(r=>{const i=document.createElement("div");i.style.border="1px solid #ddd",i.style.borderRadius="8px",i.style.padding="15px",i.style.backgroundColor="#f9f9f9",i.style.textAlign="center";const f=u.imageTag(r.filename,{alt:r.name,style:{maxWidth:"100%",height:"150px",objectFit:"contain",marginBottom:"10px",border:"1px solid #eee",borderRadius:"4px"}}),l=document.createElement("h3");l.textContent=r.name,l.style.margin="10px 0 5px 0",l.style.fontSize="16px";const c=document.createElement("p");c.textContent=`Type: ${r.type}`,c.style.margin="5px 0",c.style.color="#666",c.style.fontSize="14px";const o=document.createElement("p");o.innerHTML=`<code>${r.path}</code>`,o.style.margin="0",o.style.color="#999",o.style.fontSize="12px",o.style.wordBreak="break-all",i.appendChild(f),i.appendChild(l),i.appendChild(c),i.appendChild(o),a.appendChild(i)}),t.appendChild(a),n.appendChild(t)}document.addEventListener("DOMContentLoaded",async()=>{document.getElementById("app")&&(console.log("App initialized successfully"),await I())});const L=new k;L.init();
